# -*- coding: utf-8 -*-
"""Education By Category

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A6v7F4Mw-eFv8Jz-hjrjJoh6W6mocKwZ
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from streamlit_lottie import st_lottie
import json
import time
from streamlit_extras.metric_cards import style_metric_cards

st.set_page_config(
    page_title="India Education Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

@st.cache_data
def load_data():
    return pd.read_csv("education_state_income_detailed.csv")

df = load_data()

st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&display=swap');

    :root {
        --bg-color: #0f172a;
        --card-color: rgba(30, 41, 59, 0.7);
        --text-color: #e2e8f0;
        --accent-color: #7dd3fc;
        --secondary-color: #38bdf8;
    }

    html, body, [class*="css"] {
        font-family: 'Space Grotesk', sans-serif;
    }

    .stApp {
        background: linear-gradient(135deg, var(--bg-color) 0%, #1e293b 100%);
        color: var(--text-color);
    }

    .stPlotlyChart {
        border-radius: 15px;
        background: var(--card-color) !important;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.2);
    }

    .css-1v0mbdj {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3);
    }

    .css-1v0mbdj:hover {
        transform: translateY(-5px);
        transition: all 0.3s ease;
    }

    .metric-card {
        background: var(--card-color) !important;
        border-radius: 12px !important;
        border: 1px solid rgba(255, 255, 255, 0.1) !important;
        padding: 15px !important;
        backdrop-filter: blur(5px);
        transition: all 0.3s ease;
    }

    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px -5px rgba(125, 211, 252, 0.2) !important;
    }

    .stSelectbox div[data-baseweb="select"] > div {
        background-color: var(--card-color) !important;
        color: var(--text-color) !important;
        border-radius: 10px !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
    }

    .st-b7 {
        background-color: transparent !important;
    }

    .st-ax {
        background-color: transparent !important;
    }

    .css-1x8cf1d {
        background-color: var(--secondary-color) !important;
    }

    /* Animation classes */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .fade-in {
        animation: fadeIn 0.8s ease-out forwards;
    }

    @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(125, 211, 252, 0.4); }
        70% { box-shadow: 0 0 0 10px rgba(125, 211, 252, 0); }
        100% { box-shadow: 0 0 0 0 rgba(125, 211, 252, 0); }
    }

    .pulse {
        animation: pulse 2s infinite;
    }
</style>
""", unsafe_allow_html=True)

def load_lottie(filepath):
    with open(filepath, "r") as f:
        return json.load(f)

lottie_education = "https://assets1.lottiefiles.com/packages/lf20_0yfsb3a1.json"
lottie_analytics = "https://assets1.lottiefiles.com/packages/lf20_q5qeoo3q.json"

st.title("üìä Futuristic Education Dashboard")
st.markdown("""
<div class="fade-in">
    <p style="color: var(--accent-color); font-size: 1.1rem;">
    Interactive visualization of education metrics across Indian states by income class
    </p>
</div>
""", unsafe_allow_html=True)

col1, col2 = st.columns([1, 3])
with col1:
    selected_state = st.selectbox(
        "Select State",
        options=df['State'].unique(),
        key="state_selector"
    )

with col2:
    st_lottie(lottie_education, height=100, key="education_anim")

st.markdown("""<div class="fade-in">""", unsafe_allow_html=True)
m1, m2, m3, m4, m5 = st.columns(5)
with m1:
    state_df = df[df['State'] == selected_state]
    avg_literacy = state_df['Literacy Rate (%)'].mean()
    st.metric(
        label="Avg Literacy Rate",
        value=f"{avg_literacy:.1f}%",
        help="Average literacy rate across all income classes"
    )

with m2:
    primary_avg = state_df['Primary (%)'].mean()
    st.metric(
        label="Primary Education",
        value=f"{primary_avg:.1f}%",
        delta=f"{(primary_avg - avg_literacy):.1f}% vs literacy"
    )

with m3:
    secondary_avg = state_df['Secondary (%)'].mean()
    st.metric(
        label="Secondary Education",
        value=f"{secondary_avg:.1f}%",
        delta=f"{(secondary_avg - primary_avg):.1f}% vs primary"
    )

with m4:
    higher_sec_avg = state_df['Higher Secondary (%)'].mean()
    st.metric(
        label="Higher Secondary",
        value=f"{higher_sec_avg:.1f}%",
        delta=f"{(higher_sec_avg - secondary_avg):.1f}% vs secondary"
    )

with m5:
    grad_avg = state_df['Graduation (%)'].mean()
    st.metric(
        label="Graduation Rate",
        value=f"{grad_avg:.1f}%",
        delta=f"{(grad_avg - higher_sec_avg):.1f}% vs higher sec"
    )
st.markdown("</div>", unsafe_allow_html=True)

# Apply styling to metric cards
style_metric_cards(
    background_color="rgba(30, 41, 59, 0.7)",
    border_color="rgba(255, 255, 255, 0.1)",
    box_shadow="0 4px 6px -1px rgba(0, 0, 0, 0.2)"
)

tab1, tab2, tab3 = st.tabs(["üìà Education Trends", "üìä Income Comparison", "‚ö†Ô∏è Key Challenges"])

with tab1:
    st.markdown("""<div class="fade-in">""", unsafe_allow_html=True)
    fig = px.line(
        state_df,
        x="Income Class",
        y=["Primary (%)", "Secondary (%)", "Higher Secondary (%)", "Graduation (%)"],
        title=f"Education Progression in {selected_state}",
        template="plotly_dark",
        color_discrete_sequence=["#7dd3fc", "#38bdf8", "#0ea5e9", "#0369a1"],
        markers=True
    )

    fig.update_layout(
        hovermode="x unified",
        plot_bgcolor="rgba(0,0,0,0)",
        paper_bgcolor="rgba(0,0,0,0)",
        font=dict(color="#e2e8f0"),
        xaxis=dict(title="", showgrid=False),
        yaxis=dict(title="Percentage", gridcolor="rgba(255,255,255,0.1)"),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )

    fig.update_traces(
        line=dict(width=3),
        marker=dict(size=10)
    )

    st.plotly_chart(fig, use_container_width=True)
    st.markdown("</div>", unsafe_allow_html=True)

with tab2:
    st.markdown("""<div class="fade-in">""", unsafe_allow_html=True)
    c1, c2 = st.columns([3, 2])

    with c1:
        fig = px.bar(
            state_df,
            x="Income Class",
            y=["Primary (%)", "Secondary (%)", "Higher Secondary (%)", "Graduation (%)"],
            title=f"Education Levels by Income Class in {selected_state}",
            barmode="group",
            template="plotly_dark",
            color_discrete_sequence=["#7dd3fc", "#38bdf8", "#0ea5e9", "#0369a1"]
        )

        fig.update_layout(
            plot_bgcolor="rgba(0,0,0,0)",
            paper_bgcolor="rgba(0,0,0,0)",
            font=dict(color="#e2e8f0"),
            xaxis=dict(title="", showgrid=False),
            yaxis=dict(title="Percentage", gridcolor="rgba(255,255,255,0.1)"),
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            )
        )

        st.plotly_chart(fig, use_container_width=True)

    with c2:
        fig = go.Figure()

        for idx, row in state_df.iterrows():
            fig.add_trace(go.Scatterpolar(
                r=[
                    row['Primary (%)'],
                    row['Secondary (%)'],
                    row['Higher Secondary (%)'],
                    row['Graduation (%)'],
                    row['Primary (%)']
                ],
                theta=['Primary', 'Secondary', 'Higher Sec', 'Graduation', 'Primary'],
                name=row['Income Class'],
                fill='toself',
                line=dict(color=px.colors.qualitative.Plotly[idx]),
                opacity=0.8
            ))

        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100],
                    gridcolor="rgba(255,255,255,0.2)"
                ),
                bgcolor="rgba(0,0,0,0)"
            ),
            showlegend=True,
            title=f"Education Radar Chart for {selected_state}",
            template="plotly_dark",
            paper_bgcolor="rgba(0,0,0,0)",
            font=dict(color="#e2e8f0"),
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.1,
                xanchor="center",
                x=0.5
            )
        )

        st.plotly_chart(fig, use_container_width=True)
    st.markdown("</div>", unsafe_allow_html=True)

with tab3:
    st.markdown("""<div class="fade-in">""", unsafe_allow_html=True)
    st.subheader(f"Key Challenges in {selected_state}")

for income_class in state_df['Income Class'].unique():
        issues = state_df[state_df['Income Class'] == income_class]['Issues Faced'].values[0]

        st.markdown(f"""
        <div class="metric-card pulse" style="margin-bottom: 15px;">
            <h3 style="color: var(--accent-color); margin-bottom: 5px;">{income_class} Class</h3>
            <p style="color: var(--text-color);">{issues}</p>
        </div>
        """, unsafe_allow_html=True)
st.markdown("</div>", unsafe_allow_html=True)

st.markdown("---")
footer_col1, footer_col2 = st.columns([3, 1])
with footer_col1:
    st.markdown("""
    <div class="fade-in">
        <p style="color: var(--accent-color); font-size: 0.9rem;">
        Data visualized using Streamlit ‚Ä¢ Interactive dashboard ‚Ä¢ Updated 2023
        </p>
    </div>
    """, unsafe_allow_html=True)

with footer_col2:
    st_lottie(lottie_analytics, height=80, key="analytics_anim")

